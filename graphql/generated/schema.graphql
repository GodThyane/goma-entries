"""Represents a binary file in a space. An asset can be any file type."""
type Asset {
  contentType(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): String
  fileName(locale: String): String
  height(locale: String): Int
  linkedFrom(allowedLocales: [String]): AssetLinkingCollections
  size(locale: String): Int
  sys: Sys!
  title(locale: String): String
  url(locale: String, transform: ImageTransformOptions): String
  width(locale: String): Int
}

type AssetCollection {
  items: [Asset]!
  limit: Int!
  skip: Int!
  total: Int!
}

input AssetFilter {
  AND: [AssetFilter]
  OR: [AssetFilter]
  contentType: String
  contentType_contains: String
  contentType_exists: Boolean
  contentType_in: [String]
  contentType_not: String
  contentType_not_contains: String
  contentType_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  description: String
  description_contains: String
  description_exists: Boolean
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_in: [String]
  fileName: String
  fileName_contains: String
  fileName_exists: Boolean
  fileName_in: [String]
  fileName_not: String
  fileName_not_contains: String
  fileName_not_in: [String]
  height: Int
  height_exists: Boolean
  height_gt: Int
  height_gte: Int
  height_in: [Int]
  height_lt: Int
  height_lte: Int
  height_not: Int
  height_not_in: [Int]
  size: Int
  size_exists: Boolean
  size_gt: Int
  size_gte: Int
  size_in: [Int]
  size_lt: Int
  size_lte: Int
  size_not: Int
  size_not_in: [Int]
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
  url: String
  url_contains: String
  url_exists: Boolean
  url_in: [String]
  url_not: String
  url_not_contains: String
  url_not_in: [String]
  width: Int
  width_exists: Boolean
  width_gt: Int
  width_gte: Int
  width_in: [Int]
  width_lt: Int
  width_lte: Int
  width_not: Int
  width_not_in: [Int]
}

type AssetLinkingCollections {
  authorCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): AuthorCollection
  categoryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): CategoryCollection
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  plantCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): PlantCollection
}

enum AssetOrder {
  contentType_ASC
  contentType_DESC
  fileName_ASC
  fileName_DESC
  height_ASC
  height_DESC
  size_ASC
  size_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  url_ASC
  url_DESC
  width_ASC
  width_DESC
}

"""
plant entry creator [See type definition](https://app.contentful.com/spaces/jcu0yamxms9o/content_types/author)
"""
type Author implements Entry {
  biography(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  fullName(locale: String): String
  handle(locale: String): String
  linkedFrom(allowedLocales: [String]): AuthorLinkingCollections
  linkedIn(locale: String): String
  photo(locale: String, preview: Boolean): Asset
  sys: Sys!
  twitter(locale: String): String
}

type AuthorCollection {
  items: [Author]!
  limit: Int!
  skip: Int!
  total: Int!
}

input AuthorFilter {
  AND: [AuthorFilter]
  OR: [AuthorFilter]
  biography: String
  biography_contains: String
  biography_exists: Boolean
  biography_in: [String]
  biography_not: String
  biography_not_contains: String
  biography_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  fullName: String
  fullName_contains: String
  fullName_exists: Boolean
  fullName_in: [String]
  fullName_not: String
  fullName_not_contains: String
  fullName_not_in: [String]
  handle: String
  handle_contains: String
  handle_exists: Boolean
  handle_in: [String]
  handle_not: String
  handle_not_contains: String
  handle_not_in: [String]
  linkedIn: String
  linkedIn_contains: String
  linkedIn_exists: Boolean
  linkedIn_in: [String]
  linkedIn_not: String
  linkedIn_not_contains: String
  linkedIn_not_in: [String]
  photo_exists: Boolean
  sys: SysFilter
  twitter: String
  twitter_contains: String
  twitter_exists: Boolean
  twitter_in: [String]
  twitter_not: String
  twitter_not_contains: String
  twitter_not_in: [String]
}

type AuthorLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  plantCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): PlantCollection
}

enum AuthorOrder {
  fullName_ASC
  fullName_DESC
  handle_ASC
  handle_DESC
  linkedIn_ASC
  linkedIn_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  twitter_ASC
  twitter_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/jcu0yamxms9o/content_types/category)
"""
type Category implements Entry {
  categoryDescription(locale: String): String
  color(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  icon(locale: String, preview: Boolean): Asset
  linkedFrom(allowedLocales: [String]): CategoryLinkingCollections
  slug(locale: String): String
  sys: Sys!
  title(locale: String): String
}

type CategoryCollection {
  items: [Category]!
  limit: Int!
  skip: Int!
  total: Int!
}

input CategoryFilter {
  AND: [CategoryFilter]
  OR: [CategoryFilter]
  categoryDescription: String
  categoryDescription_contains: String
  categoryDescription_exists: Boolean
  categoryDescription_in: [String]
  categoryDescription_not: String
  categoryDescription_not_contains: String
  categoryDescription_not_in: [String]
  color: String
  color_contains: String
  color_exists: Boolean
  color_in: [String]
  color_not: String
  color_not_contains: String
  color_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  icon_exists: Boolean
  slug: String
  slug_contains: String
  slug_exists: Boolean
  slug_in: [String]
  slug_not: String
  slug_not_contains: String
  slug_not_in: [String]
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
}

type CategoryLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  plantCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): PlantCollection
}

enum CategoryOrder {
  color_ASC
  color_DESC
  slug_ASC
  slug_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type ContentfulMetadata {
  tags: [ContentfulTag]!
}

input ContentfulMetadataFilter {
  tags: ContentfulMetadataTagsFilter
  tags_exists: Boolean
}

input ContentfulMetadataTagsFilter {
  id_contains_all: [String]
  id_contains_none: [String]
  id_contains_some: [String]
}

"""
Represents a tag entity for finding and organizing content easily.
    Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
"""
type ContentfulTag {
  id: String
  name: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
    compliant with the 'date-time' format outlined in section 5.6 of
    the RFC 3339 profile of the ISO 8601 standard for representation
    of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
"""
scalar Dimension

interface Entry {
  contentfulMetadata: ContentfulMetadata!
  sys: Sys!
}

type EntryCollection {
  items: [Entry]!
  limit: Int!
  skip: Int!
  total: Int!
}

input EntryFilter {
  AND: [EntryFilter]
  OR: [EntryFilter]
  contentfulMetadata: ContentfulMetadataFilter
  sys: SysFilter
}

enum EntryOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""The 'HexColor' type represents color in `rgb:ffffff` string format."""
scalar HexColor

enum ImageFormat {
  AVIF

  """JPG image format."""
  JPG

  """
  Progressive JPG format stores multiple passes of an image in progressively higher detail.
          When a progressive image is loading, the viewer will first see a lower quality pixelated version which
          will gradually improve in detail, until the image is fully downloaded. This is to display an image as
          early as possible to make the layout look as designed.
  """
  JPG_PROGRESSIVE

  """PNG image format"""
  PNG

  """
  8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
          The 8-bit PNG format is mostly used for simple images, such as icons or logos.
  """
  PNG8

  """WebP image format."""
  WEBP
}

enum ImageResizeFocus {
  """Focus the resizing on the bottom."""
  BOTTOM

  """Focus the resizing on the bottom left."""
  BOTTOM_LEFT

  """Focus the resizing on the bottom right."""
  BOTTOM_RIGHT

  """Focus the resizing on the center."""
  CENTER

  """Focus the resizing on the largest face."""
  FACE

  """Focus the resizing on the area containing all the faces."""
  FACES

  """Focus the resizing on the left."""
  LEFT

  """Focus the resizing on the right."""
  RIGHT

  """Focus the resizing on the top."""
  TOP

  """Focus the resizing on the top left."""
  TOP_LEFT

  """Focus the resizing on the top right."""
  TOP_RIGHT
}

enum ImageResizeStrategy {
  """
  Crops a part of the original image to fit into the specified dimensions.
  """
  CROP

  """
  Resizes the image to the specified dimensions, cropping the image if needed.
  """
  FILL

  """Resizes the image to fit into the specified dimensions."""
  FIT

  """
  Resizes the image to the specified dimensions, padding the image if needed.
          Uses desired background color as padding color.
  """
  PAD

  """
  Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
  """
  SCALE

  """Creates a thumbnail from the image."""
  THUMB
}

input ImageTransformOptions {
  """
  Desired background color, used with corner radius or `PAD` resize strategy.
          Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
  """
  backgroundColor: HexColor

  """
  Desired corner radius in pixels.
          Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
          Defaults to `0`. Uses desired background color as padding color,
          unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
  """
  cornerRadius: Int

  """Desired image format. Defaults to the original image format."""
  format: ImageFormat

  """Desired height in pixels. Defaults to the original image height."""
  height: Dimension

  """
  Desired quality of the image in percents.
          Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
  """
  quality: Quality

  """Desired resize focus area. Defaults to `CENTER`."""
  resizeFocus: ImageResizeFocus

  """Desired resize strategy. Defaults to `FIT`."""
  resizeStrategy: ImageResizeStrategy

  """Desired width in pixels. Defaults to the original image width."""
  width: Dimension
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
[See type definition](https://app.contentful.com/spaces/jcu0yamxms9o/content_types/plant)
"""
type Plant implements Entry {
  author(locale: String, preview: Boolean): Author
  category(locale: String, preview: Boolean): Category
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): PlantDescription
  image(locale: String, preview: Boolean): Asset
  linkedFrom(allowedLocales: [String]): PlantLinkingCollections
  plantName(locale: String): String
  slug(locale: String): String
  sys: Sys!
}

type PlantCollection {
  items: [Plant]!
  limit: Int!
  skip: Int!
  total: Int!
}

type PlantDescription {
  json: JSON!
  links: PlantDescriptionLinks!
}

type PlantDescriptionAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type PlantDescriptionEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type PlantDescriptionLinks {
  assets: PlantDescriptionAssets!
  entries: PlantDescriptionEntries!
}

input PlantFilter {
  AND: [PlantFilter]
  OR: [PlantFilter]
  author: cfAuthorNestedFilter
  author_exists: Boolean
  category: cfCategoryNestedFilter
  category_exists: Boolean
  contentfulMetadata: ContentfulMetadataFilter
  description_contains: String
  description_exists: Boolean
  description_not_contains: String
  image_exists: Boolean
  plantName: String
  plantName_contains: String
  plantName_exists: Boolean
  plantName_in: [String]
  plantName_not: String
  plantName_not_contains: String
  plantName_not_in: [String]
  slug: String
  slug_contains: String
  slug_exists: Boolean
  slug_in: [String]
  slug_not: String
  slug_not_contains: String
  slug_not_in: [String]
  sys: SysFilter
}

type PlantLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum PlantOrder {
  slug_ASC
  slug_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
The 'Quality' type represents quality as whole numeric values between `1` and `100`.
"""
scalar Quality

type Query {
  asset(id: String!, locale: String, preview: Boolean): Asset
  assetCollection(limit: Int = 100, locale: String, order: [AssetOrder], preview: Boolean, skip: Int = 0, where: AssetFilter): AssetCollection
  author(id: String!, locale: String, preview: Boolean): Author
  authorCollection(limit: Int = 100, locale: String, order: [AuthorOrder], preview: Boolean, skip: Int = 0, where: AuthorFilter): AuthorCollection
  category(id: String!, locale: String, preview: Boolean): Category
  categoryCollection(limit: Int = 100, locale: String, order: [CategoryOrder], preview: Boolean, skip: Int = 0, where: CategoryFilter): CategoryCollection
  entryCollection(limit: Int = 100, locale: String, order: [EntryOrder], preview: Boolean, skip: Int = 0, where: EntryFilter): EntryCollection
  plant(id: String!, locale: String, preview: Boolean): Plant
  plantCollection(limit: Int = 100, locale: String, order: [PlantOrder], preview: Boolean, skip: Int = 0, where: PlantFilter): PlantCollection
}

type Sys {
  environmentId: String!
  firstPublishedAt: DateTime
  id: String!
  publishedAt: DateTime
  publishedVersion: Int
  spaceId: String!
}

input SysFilter {
  firstPublishedAt: DateTime
  firstPublishedAt_exists: Boolean
  firstPublishedAt_gt: DateTime
  firstPublishedAt_gte: DateTime
  firstPublishedAt_in: [DateTime]
  firstPublishedAt_lt: DateTime
  firstPublishedAt_lte: DateTime
  firstPublishedAt_not: DateTime
  firstPublishedAt_not_in: [DateTime]
  id: String
  id_contains: String
  id_exists: Boolean
  id_in: [String]
  id_not: String
  id_not_contains: String
  id_not_in: [String]
  publishedAt: DateTime
  publishedAt_exists: Boolean
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  publishedAt_in: [DateTime]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_not: DateTime
  publishedAt_not_in: [DateTime]
  publishedVersion: Float
  publishedVersion_exists: Boolean
  publishedVersion_gt: Float
  publishedVersion_gte: Float
  publishedVersion_in: [Float]
  publishedVersion_lt: Float
  publishedVersion_lte: Float
  publishedVersion_not: Float
  publishedVersion_not_in: [Float]
}

input cfAuthorNestedFilter {
  AND: [cfAuthorNestedFilter]
  OR: [cfAuthorNestedFilter]
  biography: String
  biography_contains: String
  biography_exists: Boolean
  biography_in: [String]
  biography_not: String
  biography_not_contains: String
  biography_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  fullName: String
  fullName_contains: String
  fullName_exists: Boolean
  fullName_in: [String]
  fullName_not: String
  fullName_not_contains: String
  fullName_not_in: [String]
  handle: String
  handle_contains: String
  handle_exists: Boolean
  handle_in: [String]
  handle_not: String
  handle_not_contains: String
  handle_not_in: [String]
  linkedIn: String
  linkedIn_contains: String
  linkedIn_exists: Boolean
  linkedIn_in: [String]
  linkedIn_not: String
  linkedIn_not_contains: String
  linkedIn_not_in: [String]
  photo_exists: Boolean
  sys: SysFilter
  twitter: String
  twitter_contains: String
  twitter_exists: Boolean
  twitter_in: [String]
  twitter_not: String
  twitter_not_contains: String
  twitter_not_in: [String]
}

input cfCategoryNestedFilter {
  AND: [cfCategoryNestedFilter]
  OR: [cfCategoryNestedFilter]
  categoryDescription: String
  categoryDescription_contains: String
  categoryDescription_exists: Boolean
  categoryDescription_in: [String]
  categoryDescription_not: String
  categoryDescription_not_contains: String
  categoryDescription_not_in: [String]
  color: String
  color_contains: String
  color_exists: Boolean
  color_in: [String]
  color_not: String
  color_not_contains: String
  color_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  icon_exists: Boolean
  slug: String
  slug_contains: String
  slug_exists: Boolean
  slug_in: [String]
  slug_not: String
  slug_not_contains: String
  slug_not_in: [String]
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
}